// --- Inclusão das bibliotecas ---
#include <ESP8266WiFi.h>
#include <SPI.h>
#include <MFRC522.h> 

// Dfine pinos do arduíno
#define SS_PIN D8
#define RST_PIN D4
 

MFRC522 rfid(SS_PIN, RST_PIN); // Instancia a classe
MFRC522::MIFARE_Key key; 

// Inicia array para armazenar NUID 
byte nuidPICC[4];

// --- Dados de Acesso do seu roteador ---
#define WLAN_SSID "iPhone de Lucas"   // nome da sua rede
#define WLAN_PASS "lucas123"   // senha de acesso do seu roteador


IPAddress server_addr(85,10,205,173);
char user[] = "arquitetura";              // Usuario MySQL
char password[] = "Teste@123";        //   Senha MySQL

WiFiClient client;             

void setup()
{
  Serial.begin(9600); // Inicia Serial
  Serial.println();      
  WiFi.mode(WIFI_STA); //Habilita o modo estação
  WiFi.begin(WLAN_SSID, WLAN_PASS); //Inicia WiFi com os dados preenchidos 
  delay(1000); // aguarda 1 segundo
  Serial.print("Conectando"); 
  while (WiFi.status() != WL_CONNECTED) // Tentando conectar na Rede WiFi
  {
    delay(500);
    //Serial.print(".");
  }
  Serial.println();
 
  SPI.begin(); // Inicia SPI bus
  rfid.PCD_Init(); // Inicia MFRC522 
  pinMode(D3,OUTPUT);
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

}
  
void conexao_wifi() {
Serial.print("Conectado | Endereço IP: "); // Imprime na Serial
  Serial.println(WiFi.localIP()); //Imprime o Endereço IP Local do ESP8266
  delay(1000); // aguarda 1 segundo
}

void loop() {
   if ( ! rfid.PICC_IsNewCardPresent())
    return;

  if ( ! rfid.PICC_ReadCardSerial())
    return;

  Serial.print(F("PICC type: "));
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  Serial.println(rfid.PICC_GetTypeName(piccType));

  if (rfid.uid.uidByte[0] != nuidPICC[0] || 
    rfid.uid.uidByte[1] != nuidPICC[1] || 
    rfid.uid.uidByte[2] != nuidPICC[2] || 
    rfid.uid.uidByte[3] != nuidPICC[3] ) 
    {
      Serial.println(F("A new card has been detected."));
    }
    // Store NUID into nuidPICC array
    for (byte i = 0; i < 4; i++) {
      nuidPICC[i] = rfid.uid.uidByte[i];
  }
   
  /*Serial.println(F("The NUID tag is:"));
  Serial.print(F("In hex: "));
  printHex(rfid.uid.uidByte, rfid.uid.size);
  Serial.println();
  Serial.print(F("In dec: "));
  printDec(rfid.uid.uidByte, rfid.uid.size);
  Serial.println();*/

  String conteudo= "";
  byte letra;
  for (byte i = 0; i < rfid.uid.size; i++) 
  {
     Serial.print(rfid.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(rfid.uid.uidByte[i], HEX);
     conteudo.concat(String(rfid.uid.uidByte[i] < 0x10 ? " 0" : " "));
     conteudo.concat(String(rfid.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Mensagem : ");
  conteudo.toUpperCase();

  if (conteudo.substring(1) == "03 60 AF 1B") //UID 1 - Cartao
  {
    Serial.println("Ola ARQ2 !");
    Serial.println();
    digitalWrite(D3, HIGH); // ativa rele, abre a trava solenoide
    delay(1000);           // espera 3 segundos
    digitalWrite(D3, LOW);  // desativa rele, fecha a trava solenoide
  }
 // Halt PICC
  rfid.PICC_HaltA();

 // Stop encryption on PCD
  rfid.PCD_StopCrypto1();

  conexao_wifi();
  }


void printDec(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(' ');
    Serial.print(buffer[i], DEC);
    }
  }


  void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
    }
  }
